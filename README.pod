=head1 NAME

Config::Loader - load configuration data from various sources

=head1 SYNOPSIS

OOP USAGE

   use Config::Loader();

   my $config    = Config::Loader->new('/path/to/sources/config');

   $hosts        = $config->{'hosts'};
   @hosts        = $config->get('hosts');
   $cloned_hosts = $config->clone()->{'hosts'};
   -------------------------------------------------------

ADVANCED USAGE

   my $config    = Config::Loader->new(
       file      => '/path/to/sources/config',
       debug     => 1 | 0
   );

=head1 DESCRIPTION

Config::Loader is a configuration module which has a few opinionated goals:

=over

=item * Flexible access

Provide a simple, easy to read, concise way of accessing the configuration
values from various sources by allowing a consumer to provider their own
interface to the configuration data.

=item * Minimal maintenance

Specify the location of the configuration files only once per
application, so that it requires minimal effort to relocate.
See L</"USING Config::Loader">

=item * Easy to alter development environment

Provide a way for overriding configuration values on a development
machine, so that differences between the dev environment and
the live environment do not get copied over accidentally.

=back

=head1 USING C<Config::Loader>

C<Config::Loader> provides a OOP interface the will generate the configuration data when instantiated:

=over

=item OOP STYLE

   use Config::Loader();

   my $config    = Config::Loader->new('/path/to/sources/config');

   $hosts        = $config->{'hosts'};
   @hosts        = $config->get('hosts');
   $cloned_hosts = $config->clone()->{'hosts'};

Also, see L</"ADVANCED USAGE">.

=back

=head1 METHODS

=head3 C<new()>

    $conf = Config::Loader->new($config_file);

new() instantiates a config object, loads the source configuration file and then requires each source's
interface module and attempts to build the configuration object by merging the returned data from each
interface modules ->load() method.

=head2 _load_stream()

Reads the _config from self and parses the streams array for enabled streams. It then sorts the sources by priority
and appends them to $self->{_streams}

=head3 C<clone()>

The data is deep cloned, using Storable, so the bigger the data, the more
performance hit.  That said, Storable's dclone is very fast.

=head3 C<debug()>

Writes additional contextual data to STDERR when C<debug> is set on instantiation.

=head2 _load_stream()

Loads a stream's interface module into @INC

